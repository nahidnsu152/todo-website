{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Form","inputText","setInputText","todos","setTodos","setStatus","value","onChange","event","target","type","classNameName","onClick","e","preventDefault","text","completed","id","Math","random","className","name","Todo","todo","map","item","filter","element","TodoList","selectedTodos","key","App","useState","status","setSelectedTodos","useEffect","getLocalTodos","selectHandler","saveLocalTodos","localStorage","setItem","JSON","stringify","getItem","todoLocal","parse","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.11c95bbb.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nconst Form = ({inputText, setInputText,todos, setTodos, setStatus}) => {\r\n\r\n    const inputTextHandler = (event) => {\r\n        setInputText(event.target.value)\r\n    }\r\n    \r\n    const submitTodoHandler = e => {\r\n        e.preventDefault()\r\n        if (inputText == \"\"){\r\n            return\r\n        }\r\n        else{\r\n            setTodos([...todos, {text: inputText, completed: false, id: Math.random() * 1000}])\r\n        }\r\n        setInputText(\"\")\r\n    }\r\n\r\n    const statusHandler = (e) => {\r\n        setStatus(e.target.value)\r\n    }\r\n\r\n    \r\n\r\n    return(\r\n        <form>\r\n            <input value = {inputText}  onChange={inputTextHandler} type=\"text\" classNameName=\"todo-input\" />\r\n            <button onClick = {submitTodoHandler} className=\"todo-button\" type=\"submit\">\r\n                <i className=\"fas fa-plus-square\"></i>\r\n            </button>\r\n            <div className=\"select\">\r\n                <select onChange = {statusHandler} name=\"todos\" className=\"filter-todo\">\r\n                    <option value=\"all\">All</option>\r\n                    <option value=\"completed\">Completed</option>\r\n                    <option value=\"incompleted\">Incompleted</option>\r\n                </select>\r\n            </div>\r\n        </form>\r\n\r\n    )\r\n}\r\n\r\nexport default Form\r\n","import React from 'react'\r\n\r\nconst Todo = ({text,todo,todos,setTodos}) => {\r\n    const deleteHandler = () => {\r\n        setTodos(todos.filter((element) => element.id !== todo.id))\r\n    }\r\n\r\n    const completedHandler = () => {\r\n        setTodos(todos.map(item => {\r\n            if(item.id === todo.id){\r\n                return{\r\n                    ...item,\r\n                    completed: !item.completed\r\n                }\r\n            }\r\n            return item\r\n        }))\r\n\r\n    }\r\n    return (\r\n        <div className=\"todo\">\r\n            <li className={`todo-item ${todo.completed ? \"completed\" : \" \"}` }> {text} </li>\r\n            <button onClick={completedHandler} className=\"complete-btn\"> <i className=\"fas fa-check\"> </i></button>\r\n            <button onClick={deleteHandler} className=\"trash-btn\"> <i className=\"fas fa-trash\"> </i></button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todo\r\n","import React from 'react'\r\nimport Todo from \"./Todo\"\r\n\r\nconst TodoList = ({todos,setTodos,selectedTodos}) => {\r\n    return (\r\n        <div className= \"todo-container\">\r\n            <ul className=\"todo-list\"> \r\n                {selectedTodos.map((todo) => (\r\n                    <Todo\r\n                    text={todo.text}\r\n                    key={todo.id}\r\n                    todos={todos}\r\n                    todo={todo}\r\n                    setTodos={setTodos} \r\n                    />\r\n                ))}\r\n            </ul>\r\n        </div>\r\n     )\r\n}\r\n\r\nexport default TodoList\r\n","import React, {useState,useEffect} from 'react';\nimport './App.css';\nimport Form from \"./components/Form\"\nimport TodoList from \"./components/TodoList\"\n\nfunction App() {\n  const [inputText, setInputText] = useState(\"\")\n  const [todos, setTodos] = useState([])\n  const [status,setStatus] = useState(\"all\")\n  const [selectedTodos,setSelectedTodos] = useState([])\n\n\n  useEffect(() => {\n    getLocalTodos()\n  }, [] )\n\n  useEffect(() =>{\n    selectHandler()\n    saveLocalTodos()\n  },[todos,status])\n\n  const selectHandler = () => {\n    switch(status){\n      case \"completed\":\n        setSelectedTodos(todos.filter((todo) => todo.completed === true ))\n        break\n      case \"incompleted\":\n        setSelectedTodos(todos.filter((todo) => todo.completed === false ))\n        break\n      default:\n        setSelectedTodos(todos)\n        break\n    }\n  }\n\nconst saveLocalTodos = () => {\n  localStorage.setItem(\"todos\", JSON.stringify(todos))\n}\n\nconst getLocalTodos = () => {\n    if (localStorage.getItem(\"todos\") === null) {\n        localStorage.setItem(\"todos\", JSON.stringify([]))\n    }\n    else {\n        let todoLocal = JSON.parse(localStorage.getItem(\"todos\"))\n        setTodos(todoLocal)\n    }\n}\n  return (\n    <div className=\"App\">\n      <header>\n        <h1> My Todo List </h1>\n      </header>\n\n      <Form \n      inputText = {inputText}\n      setInputText = {setInputText}\n      todos = {todos}\n      setTodos = {setTodos} \n      setStatus={setStatus}\n      />\n\n      <TodoList \n      setTodos={setTodos} \n      todos={todos}\n      selectedTodos={selectedTodos}\n      />\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}